use std::{collections::HashMap, env, path::PathBuf};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("cargo:rerun-if-changed=src/poisson_wrapper.cpp");
    println!("cargo:rerun-if-changed=build.rs");
    let crate_dir = PathBuf::from(env::var("CARGO_MANIFEST_DIR")?);

    let bindings = bindgen::Builder::default()
        .clang_arg("-x")
        .clang_arg("c++")
        .clang_arg("-std=c++17")
        .allowlist_item(".*SolutionParameters.*")
        .allowlist_item(".*LevelSetExtractionParameters.*")
        .header("PoissonRecon/Src/Reconstructors.h")
        .generate()?;
    let out_dir = PathBuf::from(env::var("OUT_DIR")?);
    bindings.write_to_file(out_dir.join("poisson_ctypes.rs"))?;

    cbindgen::Builder::new()
        .with_crate(crate_dir)
        .with_config(cbindgen::Config {
            autogen_warning: Some(
                "/* This file is auto-generated by cbindgen. Don't modify this manually. */"
                    .to_string(),
            ),
            usize_is_size_t: true,
            export: cbindgen::ExportConfig {
                rename: HashMap::from([
                    (
                        "PoissonRecon_Reconstructor_Poisson_SolutionParameters".into(),
                        "PoissonRecon::Reconstructor::Poisson::SolutionParameters".into(),
                    ),
                    (
                        "PoissonRecon_Reconstructor_LevelSetExtractionParameters".into(),
                        "PoissonRecon::Reconstructor::LevelSetExtractionParameters".into(),
                    ),
                    ("BoundaryType".into(), "CBoundaryType".into()),
                    ("Degree".into(), "CDegree".into()),
                ]),
                ..Default::default()
            },
            includes: vec!["Reconstructors.h".to_string()],
            ..Default::default()
        })
        .generate()
        .expect("to generate bindings")
        .write_to_file(out_dir.join("poisson_wrapper.h"));

    let mut builder = cc::Build::new();
    builder
        .cpp(true) // Switch to C++ library compilation.
        .std("c++17")
        .cargo_warnings(false)
        .shared_flag(true)
        .include("PoissonRecon/Src")
        .include(out_dir);

    #[cfg(any(
        feature = "degree_1",
        not(any(feature = "degree_1", feature = "degree_2", feature = "degree_3"))
    ))]
    builder.define("EN_DEGREE_1", "1");
    #[cfg(feature = "degree_2")]
    builder.define("EN_DEGREE_2", "1");
    #[cfg(feature = "degree_3")]
    builder.define("EN_DEGREE_3", "1");

    #[cfg(feature = "boundary_free")]
    builder.define("EN_BOUNDARY_FREE", "1");
    #[cfg(feature = "boundary_dirichlet")]
    builder.define("EN_BOUNDARY_DIRICHLET", "1");
    #[cfg(any(
        feature = "boundary_neumann",
        not(any(
            feature = "boundary_free",
            feature = "boundary_dirichlet",
            feature = "boundary_neumann"
        ))
    ))]
    builder.define("EN_BOUNDARY_NEUMANN", "1");

    builder
        .file("src/poisson_wrapper.cpp")
        .compile("poisson_wrapper");

    Ok(())
}
